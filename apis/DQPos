-- DQPos
local debug = true
local logger = DQDebug.getDebugLogger("DQPos", debug)

local sBitPatterns = { 0, 8, 64, 512, 4096, 32768, 262144, 2097152, 16777216 }

sUnknown = 0
sInUse = 1
sClear = 2
sMoveBlock = 3
sNeverBreak = 4

-- Returns the seg x, seg y and floor #
function getSegData(pX, pY, pZ)
	local sx = math.floor(tonumber(pX) / 8)
	local sy = math.floor(tonumber(pY) / 8)
	local f = math.floor(tonumber(pZ) / 10)
	return f, sx, sy
end

-- The path is a { "segs", "floorN", "segXX", "segYY" } table
function getSegDataFromPath(pPath)
	local f = tonumber(string.sub(pPath[2], 6))
	local sx = tonumber(string.sub(pPath[3], 5))
	local sy = tonumber(string.sub(pPath[4], 5))
	return f, sx, sy
end

function getMinCoordsFromSeg(pF, pSX, pSY)
	local x = pSX * 8
	local y = pSY * 8
	local z = pF * 10
	return x, y, z
end

-- Takes a world data string for a given segment, and the x,y,z of the lower corner
-- 	and expands it to an [x][y][z] array
function expandWorldData(pWorldStr, pX, pY, pZ)
	local w = {}
	w["i"] = { x=pX, y=pY, z=pZ }
	if (type(pWorldStr) == "nil") then
		return w
	end
	local t = DQUtils.decode(pWorldStr)
	for z=1,10 do
		local wz = {}
		w[z] = wz
		for y=1,8 do
			local wy = {}
			wz[y] = wy
			local o = (24 * (z - 1)) + ((y - 1) * 3)
			local n = bit.blshift(t[o+3], 16) + bit.blshift(t[o+2], 8) + t[o+1]
			-- logger:debug("z: %s y: %s o: %s n: %s", DQDebug.serialize4(z, y, o, n))
			for x=1,8 do
				local s
				if (x == 1) then
					s = 1
				else
					s = sBitPatterns[x]
				end
				-- if (n > 0) then
				-- 	logger:debug("x: %s, bp: %s, ba: %s, wy: %s", DQDebug.serialize4(x, sBitPatterns[x+1] - s, bit.band(n, sBitPatterns[x+1] - s), bit.brshift(bit.band(n, sBitPatterns[x+1] - s), (x-1)*3)))
				-- end
				wy[x] = bit.brshift(bit.band(n, sBitPatterns[x+1] - s), (x-1)*3)
			end
		end
	end
	return w
end

-- Takes an array of [x][y][z] and compacts to a string
function compactWorldData(pWorldData)
	local nWorld = ""
	for z=1,10 do
		local wz
		if (type(pWorldData[z]) == "nil") then
			wz = {}
		else
			wz = pWorldData[z]
		end
		for y=1,8 do
			local wy
			if (type(wz[y]) == "nil") then
				wy = {}
			else
				wy = wz[y]
			end
			v = 0
			for x=1,8 do
				local nVal
				if ((type(wy[x]) == "number") and (wy[x] > 0)) then
					nVal = bit.blshift(wy[x], (x - 1) * 3)
				else
					nVal = 0
				end
				-- if (nVal > 0) then
				-- 	logger:debug("x: %s o v: %s nVal: %s v: %s", DQDebug.serialize4(x, v, nVal, bit.bor(v, nVal)))
				-- end
				v = bit.bor(v, nVal)
			end
			local n1 = bit.band(v, 255)
			local n2 = bit.brshift(bit.band(v, 65280), 8)
			local n3 = bit.brshift(bit.band(v, 16711680), 16)
			-- if (v > 0) then
			-- 	logger:debug("n1: %s n2: %s n3: %s", DQDebug.serialize3(n1, n2, n3))
			-- end
			local ls = DQUtils.encode(n1, n2, n3)
			-- logger:debug("z: %s y: %s s: %s", DQDebug.serialize3(z, y, ls))
			nWorld = nWorld .. ls
		end
	end
	return nWorld
end

function createEmptyWorldData(pX, pY, pZ)
	local w = {}
	w["i"] = { x=pX, y=pY, z=pZ }
	return w
end

function setWorldData(pWorldData, pX, pY, pZ, pV)
	local rx = pX - pWorldData["i"].x + 1
	local ry = pY - pWorldData["i"].y + 1
	local rz = pZ - pWorldData["i"].z + 1
	if ((rx < 1) or (ry < 1) or (rz < 1) or (rx > 8) or (ry > 8) or (rz > 10)) then
		return nil
	end
	local wz
	if (type(pWorldData[rz]) == "nil") then
		wz = {}
		pWorldData[rz] = rz
	else
		wz = pWorldData[rz]
	end
	local wy
	if (type(wz[ry]) == "nil") then
		wy = {}
		wz[ry] = wy
	else
		wy = wz[ry]
	end
	wy[rx] = pV
end

function setRelWorldData(pWorldData, pX, pY, pZ, pV)
	local wz
	if (type(pWorldData[pZ]) == "nil") then
		wz = {}
		pWorldData[pZ] = wz
	else
		wz = pWorldData[pZ]
	end
	local wy
	if (type(wz[pY]) == "nil") then
		wy = {}
		wz[pY] = wy
	else
		wy = wz[pY]
	end
	wy[pX] = pV
end

function getRelWorldData(pWorldData, pX, pY, pZ)
	logger:debug("getRelWorldData(%s, %s, %s)", DQDebug.serialize3(pX, pY, pZ))
	if ((pX < 1) or (pY < 1) or (pZ < 1) or (pX > 8) or (pY > 8) or (pZ > 10)) then
		return nil
	end
	local wz
	if (type(pWorldData[pZ]) == "nil") then
		return DQPos.sUnknown
	else
		wz = pWorldData[pZ]
	end
	local wy
	if (type(wz[pY]) == "nil") then
		return DQPos.sUnknown
	else
		wy = wz[pY]
	end
	return wy[pX]
end

function getWorldData(pWorldData, pX, pY, pZ)
	logger:debug("getWorldData(%s, %s, %s)", DQDebug.serialize3(pX, pY, pZ))
	local rx = pX - pWorldData["i"].x + 1
	local ry = pY - pWorldData["i"].y + 1
	local rz = pZ - pWorldData["i"].z + 1
	return DQPos.getRelWorldData(pWorldData, rx, ry, rz)
end
