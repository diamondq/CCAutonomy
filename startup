programTitle = "DiamondQ Minecraft v0.2"
running = true
monitors = {}
fileList = {}
config = {}
sLastStartupYield = os.clock()
sDebug = true
sPullEvent = false
sCacheToFloppy = false

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

-- encoding
function enc(data)
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

-- decoding
function dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

function loadConfigurationFile(pFilePath)
	local configData = {}
	if (fs.exists(pFilePath) == true) then
		local h = fs.open(pFilePath, "r")
		local line = h.readLine()
		while (type(line) ~= "nil") do
			local x,y,key,value = string.find(line, "([^%s=]+)%s*=%s*(.*)")
			if (type(x) ~= "nil") then
				if (string.sub(key, 1, 2) ~= '--') then
					if ((string.sub(value, 1, 1) == "\"") and (string.sub(value, -1) == "\"")) then
						configData[key] = string.sub(value, 2, string.len(value) - 1) .. ""
					else
						configData[key] = value..""
					end
				end
			end
			line = h.readLine()
		end
		h.close()
	end
	configData.writeIgnore = {}
	configData.writeIgnore.writeIgnore = true
	return configData
end
function writeToLog(message)
	if (type(message) == "nil") then
		message = ""
	end
	local debugMessage = textutils.formatTime(os.time(), false) .. " " .. message
	local mode = "a"
	local h = fs.open("startup_debug", mode)
	h.writeLine(debugMessage)
	h.close()
end

-- Security check
for _,v in ipairs(rs.getSides()) do
	if (disk.isPresent(v)) then
		local diskConfigPath = disk.getMountPath(v) .. "/config_" .. v
		if (fs.exists(diskConfigPath)) then
			local securityConfig = loadConfigurationFile(diskConfigPath)
			if (type(securityConfig["debug"]) ~= "nil") then
				if (securityConfig["debug"] == "true") then
					sDebug = true
				end
				break
			end
		end
	end
end
if (sDebug == false) then
	-- Disable the interruptability
	sPullEvent = os.pullEvent
	os.pullEvent = os.pullEventRaw
end

local function writeConfig(pConfig, pConfigPath)
	-- Write out the current configuration file
	local h = fs.open(pConfigPath, "w")
	for k,v in pairs(pConfig) do
		if ((type(pConfig.writeIgnore) == "nil") or (pConfig.writeIgnore[k] == nil)) then
			h.writeLine(k .. " = " .. string.format("%q", v))
		end
	end
	h.close()
end

function downloadFile(pBaseUrl, pFile, pHash, pServerHash)
	local path;
	
	-- print("Opening... " .. pBaseUrl .. pFile)
	http.request(pBaseUrl .. pFile)
	local requesting = true
	local respondedText
	while requesting do
		local event, url, sourceText = os.pullEvent()
		if (event == "http_success") then
			respondedText = sourceText.readAll()
			requesting = false
		elseif (event == "http_failure") then
			print("Unable to connect to server " .. pBaseUrl .. pFile)
			return nil
		end
	end
		
	local forceDirectory = nil	-- Old code
	
	-- Handle directories 
	local fileName = fs.getName(pFile)
	if ((pFile ~= fileName) and (type(forceDirectory) == "nil")) then
		local directory = string.sub(pFile, 0, -1 * ( #fileName + 2))
		if (fs.isDir(directory) == false) then
			fs.makeDir(directory)
		end
	end
	
	local fullPath
	if (type(forceDirectory) == "nil") then
		fullPath = pFile
	else
		fullPath = forceDirectory .. "/" .. fileName
	end
	
	local h = fs.open(fullPath, "w")
	if (type(h) == "nil") then
		print("Unable to open file " .. fullPath)
		return nil
	end
	h.write(respondedText)
	h.close()
	local newHash
	if (type(pServerHash) ~= "nil") then
		newHash = pServerHash
	else
		newHash = hashFile(fullPath, false)
	end
	local lUpdated
	if ((type(pHash) == "nil") or (newHash.."" ~= pHash.."")) then
		lUpdated = true
	else
		lUpdated = false
	end
	return { path = fullPath, hash = newHash, updated = lUpdated }
end

function hash(currentHash, message)
	for var=1,string.len(message) do
		local code = string.byte(message, var)
		currentHash = (bit.blshift(currentHash, 5) - currentHash) + code
		currentHash = bit.band(currentHash, 2147483647)
		if (math.fmod(var, 64) == 0) then
			local currentTime = os.clock()
			if (sLastStartupYield + 2 < currentTime) then
				os.sleep(0.1)
				sLastStartupYield = os.clock()
			end
		end
	end
	return currentHash
end

function hashFile(filePath, decomp)
	local currentHash = 0 
	if (decomp == true) then
writeToLog("Decompressing: " .. filePath)
		local h = fs.open(filePath, "r")
		local data = h.readAll()
		h.close()
		local dData = dec(data)
		local deData,msg = LibCompress:Decompress(dData)
		if (type(deData) == "nil") then
			error("Unable to decompress for hashing: " .. msg)
		end
		local s = false
		local e,m
		local os = 1
--writeToLog("Hashing")
		while (1 == 1) do
			s,e,m = string.find(deData, "([^\r\n]*)[\r\n]*", os)
			if ((type(s) == "nil") or (s > e)) then
				break
			end
			os = e+1
-- writeToLog("H(" .. tostring(s) .. "," .. tostring(e) .. "): " .. tostring(m))
			currentHash = hash(currentHash, m)
		end
--writeToLog("Hash: " .. tostring(currentHash))
	else
		local h = fs.open(filePath, "r")
		local line = h.readLine()
		while (type(line) ~= "nil") do
			currentHash = hash(currentHash, line)
			line = h.readLine()
		end
		h.close()
	end
	return currentHash
end

function checkForUpdatedFile(pFile, pMonitors, pCount, pTotal, pServerHash, pClientHash, pFloppyHash)
	local fileHash = nil
	local fileUpdated = false
	local filePath = pFile
	local checkStatus = "Processing " .. pFile .. "..."
	if (fs.exists(filePath)) then
		if (type(pClientHash) ~= "nil") then
			fileHash = pClientHash
		else
			displayStatus(pMonitors, checkStatus, pCount, pTotal, "Hashing file on hard drive...")
			fileHash = hashFile(filePath, false)
		end
	end
	
	-- File may exist on disk drive
	local diskHash = nil
	
	local diskDrive = nil
	local emptyDrive = nil
	if (sCacheToFloppy == true) then
		for k,v in ipairs(rs.getSides()) do
			if (disk.isPresent(v)) then
				if (disk.hasData(v)) then
					if (disk.getLabel(v) == "DiamondQ") then
						diskDrive = v 
						break
					else
						local fileList = fs.list(disk.getMountPath(v))
						if (#fileList == 0) then
							emptyDrive = v
						end
					end
				end
			end
		end
	end
	if ((diskDrive == nil) and (emptyDrive ~= nil)) then
		disk.setLabel(emptyDrive, "DiamondQ")
		diskDrive = emptyDrive
	end
	
	local diskPath = nil
	if (diskDrive ~= nil) then
		local mountPath = disk.getMountPath(diskDrive)
		diskPath = mountPath .. "/" .. pFile
		if (fs.exists(diskPath) == true) then
			if (type(pFloppyHash) ~= "nil") then
				diskHash = pFloppyHash
			else
				displayStatus(pMonitors, checkStatus, pCount, pTotal, "Hashing file on floppy drive...")
				if ((type(LibCompress) == "table") and (pFile ~= "startup") and (pFile ~= "DQShell") and (pFile ~= "apis/LibCompress")) then
					diskHash = hashFile(diskPath, true)
				else
					diskHash = hashFile(diskPath, false)
				end
			end
		end
	end
	
	-- Attempt to download if possible
	if (type(http) ~= nil) then
		if ((type(config.ignoreHTTP) == "nil") or (config.ignoreHTTP == "false")) then
			if ((type(pServerHash) == "nil") or
				((type(fileHash) == "nil") and (type(diskHash) == "nil")) or
				((type(fileHash) ~= "nil") and (pServerHash.."" ~= fileHash.."")) or
				((type(diskHash) ~= "nil") and (pServerHash.."" ~= diskHash.."")) ) then
				displayStatus(pMonitors, checkStatus, pCount, pTotal, "Downloading from server...")
				local downloadResult = downloadFile(config["baseURL"], filePath, fileHash, pServerHash)
				if (downloadResult == nil) then
					return nil
				end
				fileUpdated = downloadResult.updated
-- writeToLog("fileUpdated A=" .. tostring(fileUpdated))
				fileHash = downloadResult.hash
				filePath = downloadResult.path
-- writeToLog("diskDrive=" .. tostring(diskDrive) .. " diskHash=" .. tostring(diskHash) .. " fileHash=" .. tostring(fileHash))
			end
		end
	end

	-- Fail if there is no place to get the file
	if ((fileHash == nil) and (diskHash == nil)) then
		print("The file " .. pFile .. " does not exist on the hard drive or the floppy drive and HTTP access is not allowed. You must manually copy this program onto the drive.")
		return nil
	end
		
	-- Update hard drive from floppy if possible
	if ((fileUpdated == false) and (diskHash ~= nil) and ((fileHash == nil) or (fileHash.."" ~= diskHash..""))) then
		displayStatus(pMonitors, checkStatus, pCount, pTotal, "Updating hard drive...")
		if (fs.exists(filePath) == true) then
			fs.delete(filePath)
		end
		local fileName = fs.getName(filePath)
		if ((pFile ~= fileName) and (type(forceDirectory) == "nil")) then
			local directory = string.sub(filePath, 0, -1 * ( #fileName + 2))
			if (fs.isDir(directory) == false) then
				fs.makeDir(directory)
			end
		end
		if ((type(LibCompress) == "table") and (pFile ~= "startup") and (pFile ~= "DQShell") and (pFile ~= "apis/LibCompress")) then
			local h = fs.open(diskPath, "r")
			local data = h.readAll()
			h.close()
writeToLog("File: " .. pFile)
--writeToLog("Encoded: " .. data)
			local dData = dec(data)
--writeToLog("Decoded: " .. dData)
			local deData,msg = LibCompress:Decompress(dData)
			if (type(deData) == "nil") then
				error("Unable to decompress for hashing: " .. msg)
			end
--writeToLog("Decompres: " .. deData)
			h = fs.open(filePath, "w")
			h.write(deData)
			h.close()
		else
			fs.copy(diskPath, filePath)
		end
		fileHash = diskHash
		fileUpdated = true
-- writeToLog("fileUpdated B=" .. tostring(fileUpdated))
-- writeToLog("diskDrive=" .. tostring(diskDrive) .. " diskHash=" .. tostring(diskHash) .. " fileHash=" .. tostring(fileHash))
	end
	
	-- Update floppy if necessary
	if ((diskDrive ~= nil) and ((diskHash == nil) or (diskHash.."" ~= fileHash..""))) then
		displayStatus(pMonitors, checkStatus, pCount, pTotal, "Updating floppy...")
		if (fs.exists(diskPath) == true) then
			fs.delete(diskPath)
		end
		local fileName = fs.getName(diskPath)
		if ((pFile ~= fileName) and (type(forceDirectory) == "nil")) then
			local directory = string.sub(diskPath, 0, -1 * ( #fileName + 2))
			if (fs.isDir(directory) == false) then
				fs.makeDir(directory)
			end
		end
		local f = fs.open(filePath, "r")
		local fileData = f.readAll()
		f.close()
		if ((type(LibCompress) == "table") and (pFile ~= "startup") and (pFile ~= "DQShell") and (pFile ~= "apis/LibCompress")) then
			local cData = LibCompress:Compress(fileData)
			local eData = enc(cData)
			local size = string.len(eData)
			local left = fs.getFreeSpace(diskPath)
			if (size > left) then
				error("The floppy disk doesn't have enough space to copy " .. filePath)
			end
			local f = fs.open(diskPath, "w")
			f.write(eData)
			f.close()
			-- Tests
			local t1 = dec(eData)
writeToLog("Writing: " .. pFile)
			if (t1 ~= cData) then
				error("Decoding doesn't match")
			end
			local t2,msg = LibCompress:Decompress(t1)
			if (type(t2) == "nil") then
				error(msg)
			end
			if (t2 ~= fileData) then
				local t3 = LibCompress:Decompress(cData)
				if (t3 ~= fileData) then
					print(t3)
					error("Decompressing doesn't match both ways")
				else
					error("Decompressing doesn't match one ways")
				end
			end
		else
			local size = string.len(fileData)
			local left = fs.getFreeSpace(diskPath)
			if (size > left) then
				error("The floppy disk doesn't have enough space to copy " .. filePath)
			end
			local f = fs.open(diskPath, "w")
			f.write(fileData)
			f.close()
		end
	end
		
	return fileUpdated, fileHash
end

function displayLogo(pMonitor)
	if (pMonitor.w > 49) then
		pMonitor.obj.clear()
		local tcw = (pMonitor.w - 49) / 2
		local tch = (pMonitor.h - 6) / 2
		pMonitor.obj.setCursorPos(tcw,tch)
		pMonitor.obj.write("______ _                                 _ _____ ")
		pMonitor.obj.setCursorPos(tcw,tch+1)
		pMonitor.obj.write("|  _  (_)                               | |  _  |")
		pMonitor.obj.setCursorPos(tcw,tch+2)
		pMonitor.obj.write("| | | |_  __ _ _ __ ___   ___  _ __   __| | | | |")
		pMonitor.obj.setCursorPos(tcw,tch+3)
		pMonitor.obj.write("| | | | |/ _V | '_ V _ \\ / _ \\| '_ \\ / _V | | | |")
		pMonitor.obj.setCursorPos(tcw,tch+4)
		pMonitor.obj.write("| |/ /| | (_| | | | | | | (_) | | | | (_| \\ \\/' /")
		pMonitor.obj.setCursorPos(tcw,tch+5)
		pMonitor.obj.write("|___/ |_|\\__,_|_| |_| |_|\\___/|_| |_|\\__,_|\\_/\\_\\")
		pMonitor.statusY = tch + 7
	else
		pMonitor.obj.clear()
		local tcw = (pMonitor.w - 26) / 2
		local tch = (pMonitor.h - 3) / 2
		pMonitor.obj.setCursorPos(tcw,tch)
		pMonitor.obj.write(".__                  ..__.")
		pMonitor.obj.setCursorPos(tcw,tch+1)
		pMonitor.obj.write("|  \\* _.._ _  _ ._  _||  |")
		pMonitor.obj.setCursorPos(tcw,tch+2)
		pMonitor.obj.write("|__/|(_][ | )(_)[ )(_]|__\\")
		pMonitor.statusY = tch + 4
	end
	os.sleep(0.1)
end

function displayStatus(pMonitors, pMessage, pCount, pTotal, pSecondary)
	for _,v in pairs(pMonitors) do
		os.sleep(0.1)
		v.obj.setCursorPos(1,v.statusY)
		v.obj.clearLine()
		v.obj.write(pMessage)
		if (type(pCount) ~= "nil") then
			v.obj.setCursorPos(1,v.statusY + 1)
			local bar = "|"
			local pos = pCount * 20 / pTotal
			if (pos > 1) then
				bar = bar .. string.rep("=", pos - 1)
			end
			if (pos > 0) then
				bar = bar .. ">"
			end
			if (pos > 20) then
				pos = 20
			end
			bar = bar .. string.rep(" ", 20 - pos) .. "| " .. pCount .. " of " .. pTotal
			local centerCount = math.max((v.w - string.len(bar)) / 2, 0)
			v.obj.write(string.rep(" ", centerCount) .. bar .. string.rep(" ", centerCount))
			if (type(pSecondary) ~= "nil") then
				v.obj.setCursorPos(1,v.statusY + 2)
				local secondCount = math.max((v.w - centerCount - 1 - string.len(pSecondary)), 0)
				v.obj.write(string.rep(" ", centerCount) .. " " .. pSecondary .. string.rep(" ", secondCount))
			end
		end
	end
end

menus = { 1 }

function network_joined()
	table.insert(menus, 1, 4)
	nextWindow()
	DQUI.refresh()
end

function userChoice(pContent, pChoice, pData)
	if (pData == 1) then -- computer_type
		config["computer_type"] = pContent.list_choices[pChoice].u_type
		if (type(DQNet) ~= "nil") then
			table.insert(menus, 1, 2)
		else
			table.insert(menus, 1, 4)
		end
	elseif (pData == 2) then -- create_network_password
		if (pChoice == "BACK") then
			table.remove(menus, 1)
		else
			config["network_password"] = pChoice
			if (config.computer_type ~= "main") then
				-- Verify network connectivity
				DQNet.join(network_joined)
				table.insert(menus, 1, 3)
			else
				table.insert(menus, 1, 4)
			end
		end
	elseif (pData == 3) then -- join network
		if (pChoice == "TIMEOUT") then
			table.remove(menus, 1)
		end
	end
	nextWindow()
	DQUI.refresh()
end

function nextWindow()
	if (menus[1] == 1) then
		if (type(_G["turtle"]) == "nil") then
			DQUI.displayDialog({ title=programTitle, upper="There is no configuration file.", type="list", list_instruction="What is the main use for this computer?",
				list_choices={
					{ label="Test Actor", u_type="actor" },
					{ label="Network Repeater / GPS", u_type="repeater", default_after=30 },
					{ label="Main House Computer", u_type="main" },
					{ label="Monitor Driver", u_type="monitor" },
					{ label="Tree Farm Manager", u_type="treefarmer" },
					{ label="Crafting Station", u_type="crafting" },
					{ label="Diagnostic Train Station", u_type="diagnosticstation" },
					{ label="Info Terminal", u_type="infoterminal" },
					{ label="Lan / RedNet Relay", u_type="lanrednetrelay" },
					{ label="Unit Tester", u_type="tester" },
					{ label="Construction Foreman Computer", u_type="foreman" }
					}, on_complete = userChoice, on_complete_data = 1 } )
		else
			DQUI.displayDialog({ title=programTitle, upper="There is no configuration file.", type="list", list_instruction="What is the tool / primary purpose for this turtle?",
				list_choices={
					{ label="Pickaxe (Mining)", u_type="miner" },
					{ label="Extruder", u_type="extruder" },
					{ label="Hoe (Farming)", u_type="farmer" },
					{ label="None (Sorter)", u_type="sorter" },
					{ label="Sword (Melee)", u_type="fighter"},
					{ label="Axe (Felling)", u_type="lumberjack"},
					{ label="Shovel (Digging)", u_type="digger" },
					{ label="Crafting Table (Crafting)", u_type="crafter" }
					}, on_complete = userChoice, on_complete_data = 1 } )
		end
	elseif (menus[1] == 2) then
		if ((config.computer_type == "main") or (config.computer_type == "foreman")) then
			DQUI.displayDialog( { title=programTitle, upper="To protect your network of computers and turtles, you must provide a network password:",
				type="field", field_instructions="Enter password:", on_complete = userChoice, on_complete_data = 2, on_back="BACK" } )
		else
			if ((type(config.network_password) == "nil") or (string.len(config.network_password) == 0)) then
				DQUI.displayDialog( { title=programTitle, upper="You must join an existing network.",
					type="field", field_instructions="Enter network password:", on_complete = userChoice, on_complete_data = 2, on_back="BACK" } )
			else
				DQUI.displayDialog( { title=programTitle, upper="No computer responded to your join request. Either your password is incorrect, or there is no computer in range.\nYou must join an existing network.",
					type="field", field_instructions="Enter network password:", on_complete = userChoice, on_complete_data = 2, on_back="BACK" } )
			end
		end
	elseif (menus[1] == 3) then
		DQUI.displayDialog( { title=programTitle, upper="Waiting for network confirmation...", type="timer", timer_length = 10, on_complete = userChoice, on_complete_data = 3 } )
	elseif (menus[1] == 4) then
		-- Write out the current configuration file
		writeConfig(config, "config")
		-- Restart
		for k,v in pairs(monitors) do
			v.obj.clear()
		end
		-- os.sleep(0.1)
		running = false
		os.reboot()
	elseif (menus[1] == 99) then
		-- Pass control the appropriate module

		for _,v in ipairs(fileList) do
			if ((type(v.computer_type) ~= "nil") and (v.computer_type == config.computer_type) and (v.type == "API")) then
				os.loadAPI(v.file)
				if (type(_G[fs.getName(v.file)]) == "nil") then
					print("Failed to load " .. v.file)
					running = false
					return
				end
			end
		end

		for _,v in ipairs(fileList) do
			if ((type(v.computer_type) ~= "nil") and (v.computer_type == config.computer_type) and (v.type == "API")) then
				if (type(_G[fs.getName(v.file)].setup) == "function") then
					_G[fs.getName(v.file)].setup(programTitle, config, eventHandlers)
				end
			end
		end
		
		if (type(DQNet) ~= "nil") then
			DQNet.join()
		end
		DQUI.calculateNext()
	end
end

local mw, mh = term.getSize()
monitors["console"] = { obj = term, w = mw, h = mh }
displayLogo(monitors["console"])
for k,v in pairs(rs.getSides()) do
	if (peripheral.isPresent(v)) then
		if (peripheral.getType(v) == "monitor") then
			local w = peripheral.wrap(v)
			local mw, mh = w.getSize()
			monitors[v] = { obj = w, w = mw, h = mh }
			displayLogo(monitors[v])
		end
	end
end

-- Start by reading a config file is present

displayStatus(monitors, "Loading configuration file...")
config = loadConfigurationFile("config")
local configUpdated = false

-- Check for configs in related disks
for k,v in ipairs(rs.getSides()) do
	if (disk.isPresent(v)) then
		local diskConfigPath = disk.getMountPath(v) .. "/config_" .. v
		if (fs.exists(diskConfigPath)) then
			local mergeConfig = loadConfigurationFile(diskConfigPath)
			for k1,v1 in pairs(mergeConfig) do
				if ((type(config[k1]) == "nil") or (tostring(config[k1]) == "")) then
					config[k1] = v1
					configUpdated = true
				end
			end
		end
	end
end

-- Defaults
if (type(config["server"]) == "nil") then
	config["server"] = "http://ravensview1318.mooo.com:3000"
end
if (type(config["variant"]) ~= "nil") then
	config["baseURL"] = config["server"] .. "/" .. config["variant"] .. "/"
else
	config["baseURL"] = config["server"] .. "/"
end
config.writeIgnore.baseURL = true

if (type(config["fake_turtle"]) ~= "nil") then
	if (tostring(config["fake_turtle"]) == "true") then
		local nf = { getFuelLevel = function () return 0 end,
			forward = function() os.queueEvent("turtle_response", 0, false) end,
			back = function() os.queueEvent("turtle_response", 0, false) end,
			turnLeft = function() os.queueEvent("turtle_response", 0, true) end,
			turnRight = function() os.queueEvent("turtle_response", 0, true) end,
			up = function() os.queueEvent("turtle_response", 0, false) end,
			down = function() os.queueEvent("turtle_response", 0, false) end,
			detect = function() os.queueEvent("turtle_response", 0, false) end,
			detectUp = function() os.queueEvent("turtle_response", 0, false) end,
			detectDown = function() os.queueEvent("turtle_response", 0, false) end,
			dig = function() os.queueEvent("turtle_response", 0, false) end,
			digDown = function() os.queueEvent("turtle_response", 0, false) end,
			digUp = function() os.queueEvent("turtle_response", 0, false) end,
			place = function() os.queueEvent("turtle_response", 0, false) end,
			placeUp = function() os.queueEvent("turtle_response", 0, false) end,
			placeDown = function() os.queueEvent("turtle_response", 0, false) end,
			suck = function() os.queueEvent("turtle_response", 0, false) end,
			suckUp = function() os.queueEvent("turtle_response", 0, false) end,
			suckDown = function() os.queueEvent("turtle_response", 0, false) end,
			drop = function() os.queueEvent("turtle_response", 0, false) end,
			dropUp = function() os.queueEvent("turtle_response", 0, false) end,
			dropDown = function() os.queueEvent("turtle_response", 0, false) end,
			select = function() os.queueEvent("turtle_response", 0, true) end,
			refuel = function() os.queueEvent("turtle_response", 0, false) end,
			transferTo = function() os.queueEvent("turtle_response", 0, false) end,
			compareTo = function() os.queueEvent("turtle_response", 0, false) end,
			getItemCount = function() return 0 end
			}
		_G["turtle"] = { native=nf }
	end
end

-- Look for DiamondQ primary drive
local diskDrive = nil
local emptyDrive = nil
for k,v in ipairs(rs.getSides()) do
	if (disk.isPresent(v)) then
		if (disk.hasData(v)) then
			if (disk.getLabel(v) == "DiamondQ") then
				diskDrive = v 
				break
			else
				local fileList = fs.list(disk.getMountPath(v))
				if (#fileList == 0) then
					emptyDrive = v
				end
			end
		end
	end
end
if ((diskDrive == nil) and (emptyDrive ~= nil)) then
	disk.setLabel(emptyDrive, "DiamondQ")
	diskDrive = emptyDrive
end

local diskConfig = {}
local diskPath = nil
if (diskDrive ~= nil) then
	local mountPath = disk.getMountPath(diskDrive)
	diskPath = mountPath .. "/config"
	if (fs.exists(diskPath) == true) then
		diskConfig = loadConfigurationFile(diskPath)
	end
end

-- Now check for an updated startup program

local fileCurrent = 0
local fileTotal = 5

local result, fileHash = checkForUpdatedFile("startup", monitors, fileCurrent, fileTotal, nil, config["hash_startup"], diskConfig["hash_startup"])
if (result == nil) then
	return
end
if ((result == true) and (diskPath ~= nil)) then
	diskConfig["hash_startup"] = fileHash
	writeConfig(diskConfig, diskPath)
end
if ((result == true) or (type(config["hash_startup"]) == "nil")) then
--	writeToLog("Rebooting because result=" .. tostring(result) .. " or type(config[\"hash_startup\"])=" .. type(config["hash_startup"]))
	configUpdated = true
	config["hash_startup"] = fileHash
	writeConfig(config, "config")
	os.reboot()
	return
end

fileCurrent = 1

result, fileHash = checkForUpdatedFile("fileList", monitors, fileCurrent, fileTotal, nil, config["hash_fileList"], diskConfig["hash_fileList"])
if (result == nil) then
	return
end
if ((result == true) or ((diskPath ~= nil) and (type(diskConfig["hash_fileList"]) == "nil"))) then
	configUpdated = true
	diskConfig["hash_fileList"] = fileHash
end
if ((result == true) or (type(config["hash_fileList"]) == "nil")) then
	configUpdated = true
	config["hash_fileList"] = fileHash
end

fileCurrent = fileCurrent + 1

-- Now load the file list

displayStatus(monitors, "Loading file list...", fileCurrent, fileTotal, "")
fileList = loadfile("fileList")()

-- Filter the list
local ct = config.computer_type
fileTotal = 2
for _,v in pairs(fileList) do
	if ((type(v.computer_type) == "nil") or (v.computer_type == ct)) then
		fileTotal = fileTotal + 1
	end
end

local failed = false
for _,v in ipairs(fileList) do
	if ((type(v.computer_type) == "nil") or (v.computer_type == ct) or (ct == "foreman")) then
		local result, fileHash = checkForUpdatedFile(v.file, monitors, fileCurrent, fileTotal, v.hash, config["hash_" .. v.file], diskConfig["hash_" .. v.file])
		if (result == nil) then
			return
		end
		if ((result == true) or ((diskPath ~= nil) and (type(diskConfig["hash_" .. v.file]) == "nil"))) then
			configUpdated = true
			diskConfig["hash_" .. v.file] = fileHash
		end
		if ((result == true) or (type(config["hash_" .. v.file]) == "nil")) then
			configUpdated = true
			config["hash_" .. v.file] = fileHash
		end
		fileCurrent = fileCurrent + 1
		if ((type(v.computer_type) == "nil") and (v.file ~= "DQShell") and (v.type == "API")) then
			os.loadAPI(v.file)
			if (type(_G[fs.getName(v.file)]) == "nil") then
				print("Failed to load " .. v.file)
				failed = true
				break
			end
		end
	end
end

if (configUpdated == true) then
	if (diskPath ~= nil) then
		writeConfig(diskConfig, diskPath)
	end
	writeConfig(config, "config")
end

displayStatus(monitors, "Loading modules...", fileCurrent, fileTotal, "")

eventHandlers = {}

if (failed == false) then
	if ((type(config.computer_type) == "nil") or (string.len(config.computer_type) == 0)) then
		-- Bring up the basic environment so we can get the computer type
		for _,v in ipairs(fileList) do
			if ((type(v.computer_type) == "nil") and (v.loadPhase == "1") and (v.type == "API")) then
				if (type(_G[fs.getName(v.file)].setup) == "function") then
					_G[fs.getName(v.file)].setup(programTitle, config, eventHandlers)
				end
			end
		end

		for k,v in pairs(monitors) do
			v.obj.clear()
		end

		menus = { 1 }

		nextWindow()
		DQUI.refresh()

		while running do
			local event, param1, param2, param3, param4, param5 = os.pullEvent()
			for _,handler in ipairs(eventHandlers) do
				handler(event, param1, param2, param3, param4, param5)
			end
		end
	else
		for _,v in ipairs(fileList) do
			if ((type(v.computer_type) ~= "nil") and (v.computer_type == config.computer_type) and (v.type == "API")) then
				os.loadAPI(v.file)
				if (type(_G[fs.getName(v.file)]) == "nil") then
					print("Failed to load " .. v.file)
					running = false
					return
				end
			end
		end
		if (sPullEvent ~= false) then
			os.pullEvent = sPullEvent
		end
		shell.run("DQShell")
	end
end