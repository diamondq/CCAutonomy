-- ClearSegmentJob

local debug = true
local logger = DQDebug.getDebugLogger("ClearSegmentJob", debug)

-- States (in rough order): { getDetails, emptyInventory, moveToSegment, digColumn, digRow, digLevel, emptyInventory }

local ClearSegmentJob = DQObject.class("ClearSegmentJob", FiniteStateMachine.FSMActor)
function ClearSegmentJob:preStart()
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.vsuper:preStart()
	rSelf.turtle = rSelf:getContext():actorFor("/Turtle")
end

function ClearSegmentJob:whenStartingEventBegin(pMessage, pData)
	logger:debug("whenStartingEventBegin(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.location = pData.data
	rSelf.floor,rSelf.sx,rSelf.sy = DQPos.getSegDataFromPath(rSelf.location)
	rSelf.x1,rSelf.y1,rSelf.z1 = DQPos.getMinCoordsFromSeg(rSelf.floor,rSelf.sx,rSelf.sy)
	rSelf.segs = {}
	rSelf:setState("getDetails")
	rSelf:getContext():getParent():tell("ack", nil, rSelf:getActorRef())
	return true
end

-- This action needs to issue a request to get the details about this segment
function ClearSegmentJob:onGetDetails()
	local rSelf = ClearSegmentJob:cast(self)
	logger:debug("onGetDetails() loc=%s", DQDebug.serialize1(rSelf.location))
	rSelf:getContext():actorFor("/MainStore"):tell("get", { rSelf.location, { "status", "world" } }, rSelf:getActorRef())
	return true
end

-- When the data arrives from the store, make sure that we're still clearing this
-- segment. If yes, then record the data, and move to the emptyInventory state
function ClearSegmentJob:whenGetDetailsEventData(pMessage, pData)
	logger:debug("whenGetDetailsEventData(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	-- Verify that the segment is still being cleared
	if (pData[1] ~= "Clearing") then
		rSelf:getContext():getParent():tell("cancelledJob", nil, rSelf:getActorRef())
		return true
	end
	rSelf.clearWorld = DQPos.expandWorldData(pData[2])
	-- Look for any never break blocks
	rSelf.specials = {}
	for z=1,10 do
		local nb = false
		for y=1,8 do
			for x=1,8 do
				if (DQPos.getRelWorldData(rSelf.clearWorld, x, y, z) == DQPos.sNeverBreak) then
					nb = true
					break
				end
			end
			if (nb == true) then
				break
			end
		end
		rSelf.specials[z] = nb
	end
	-- Now start getting the details of the segments surrounding this one
	rSelf.segInfoDir = "u"
	rSelf:setState("getSegInfo")
	return true
end

function ClearSegmentJob:onGetSegInfo()
	logger:debug("onGetDetails()")
	local rSelf = ClearSegmentJob:cast(self)
	local f = rSelf.floor
	local x = rSelf.sx
	local y = rSelf.sy
	if (rSelf.segInfoDir == "u") then
		f = f + 1
		rSelf.nextSegInfoDir = "d"
	elseif (rSelf.segInfoDir == "d") then
		f = f - 1
		rSelf.nextSegInfoDir = "f"
	elseif (rSelf.segInfoDir == "f") then
		y = y - 1
		rSelf.nextSegInfoDir = "b"
	elseif (rSelf.segInfoDir == "b") then
		y = y + 1
		rSelf.nextSegInfoDir = "l"
	elseif (rSelf.segInfoDir == "l") then
		x = x - 1
		rSelf.nextSegInfoDir = "r"
	elseif (rSelf.segInfoDir == "r") then
		x = x + 1
		rSelf.nextSegInfoDir = ""
	end
	local loc = { "segs", "floor" .. tostring(f), "segX" .. tostring(x), "segY" .. tostring(y) }
	rSelf:getContext():actorFor("/MainStore"):tell("get", { loc, { "status" }, { "Untouched" } }, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenGetSegInfoEventData(pMessage, pData)
	logger:debug("whenGetSegInfoEventData(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData[1] == "Untouched") then
		rSelf.segs[rSelf.segInfoDir] = true
	else
		rSelf.segs[rSelf.segInfoDir] = false
	end
	rSelf.segInfoDir = rSelf.nextSegInfoDir
	if (rSelf.segInfoDir == "") then
		rSelf:setState("initialEmptyInventory")
	else
		rSelf:setState("getSegInfo")
	end
	return true
end

function ClearSegmentJob:onInitialEmptyInventory()
	logger:debug("onInitialEmptyInventory()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("emptyInventory", nil, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenInitialEmptyInventoryEventEmptyInventoryResult(pMessage, pData)
	logger:debug("whenInitialEmptyInventoryEventEmptyInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("loadInventory")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to empty inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onLoadInventory()
	logger:debug("onLoadInventory()")
	local rSelf = ClearSegmentJob:cast(self)
	if (rSelf.segs.u == true) then
		rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=64, blockname="Cobblestone"}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
	else
		rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=0}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:whenLoadInventoryEventLoadInventoryResult(pMessage, pData)
	logger:debug("whenLoadInventoryEventLoadInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("startClearing")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to load inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onStartClearing()
	logger:debug("onStartClearing()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.complete = {}
	-- Now figure out the first level to clear
	-- If the upper segment is untouched, then move to z10
	-- else if there is no neverbreak's in 10,9 and 8, then move to z9
	-- else move to z10
	if (rSelf.segs.u == true) then
		rSelf.zOffset = 10
	elseif ((rSelf.specials[10] == false) and (rSelf.specials[9] == false) and (rSelf.specials[8] == false)) then
		rSelf.zOffset = 9
	else
		rSelf.zOffset = 10
	end
	if (rSelf.segs.l == true) then
		rSelf.xOffset = 0
		rSelf.yOffset = 0
	else
		rSelf.xOffset = 1
		if (rSelf.segs.f == true) then
			rSelf.yOffset = -1
		else
			rSelf.yOffset = 0
		end
	end
	rSelf.dir = 3
	rSelf:setState("move")
	return true
end

function ClearSegmentJob:onDigColumn()
	logger:debug("onDigColumn()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.digDetect = false
	if (rSelf.digDown == true) then
		rSelf.clearDir = "d"
	elseif (rSelf.digUp == true) then
		rSelf.clearDir = "u"
	elseif (rSelf.digFront == true) then
		rSelf.clearDir = "f"
	else
		rSelf:setState("move")
		return true
	end
	rSelf:setState("detect")
	return true
end

function ClearSegmentJob:onDetect()
	logger:debug("onDetect()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("detect", rSelf.clearDir, rSelf:getActorRef())
	return true
end

local function checkComplete(pComplete, pX, pY, pZ)
	logger:debug("Check complete: %s", DQDebug.serialize1(pComplete))
	if (type(pComplete[pZ]) == "nil") then
		return false
	end
	if (type(pComplete[pZ][pY]) == "nil") then
		return false
	end
	if (type(pComplete[pZ][pY][pX]) == "nil") then
		return false
	end
	return pComplete[pZ][pY][pX]
end

function ClearSegmentJob:whenDetectEventDetectResult(pMessage, pData)
	local rSelf = ClearSegmentJob:cast(self)
	logger:debug("whenDetectEventDetectResult(%s, %s, %s, %s, %s, %s, %s)", DQDebug.serialize7(pMessage, pData, rSelf.dir, rSelf.clearDir, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset))
	if (pData == true) then
		rSelf:setState("suck")
		return true
	else
		if (rSelf.clearDir == "d") then
			if (checkComplete(rSelf.complete, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset - 1) == false) then
				rSelf:setState("fillDown")
			else
				rSelf:setState("changeDir")
			end
		elseif (rSelf.clearDir == "u") then
			if (rSelf.fillUp == true) then
				rSelf:setState("fillRoof")
			else
				if (checkComplete(rSelf.complete, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset + 1) == false) then
					rSelf:setState("fillUp")
				else
					rSelf:setState("changeDir")
				end
			end
		else
			rSelf:setState("changeDir")
		end
	end
	return true
end

function ClearSegmentJob:onChangeDir()
	logger:debug("onChangeDir()")
	local rSelf = ClearSegmentJob:cast(self)
	if (rSelf.clearDir == "d") then
		if (rSelf.digUp == true) then
			rSelf.clearDir = "u"
		elseif (rSelf.digFront == true) then
			rSelf.clearDir = "f"
		else
			rSelf.clearDir = nil
		end
	elseif (rSelf.clearDir == "u") then
		if (rSelf.digFront == true) then
			rSelf.clearDir = "f"
		else
			rSelf.clearDir = nil
		end
	else
		rSelf.clearDir = nil
	end
	if (type(rSelf.clearDir) ~= "nil") then
		rSelf:setState("detect")
		return true
	end
	if (rSelf.digDetect == true) then
		-- Check inventory levels
		local invCount = 0
		for s=1,16 do
			local count = DQTurtle.getItemCount(s)
			if (count > 0) then
				invCount = invCount + 1
			end
		end
		if (invCount >= 15) then
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("emptyInventory", nil, rSelf:getActorRef())
			return true
		end
	end
	rSelf:setState("move")
	return true
end

function ClearSegmentJob:whenChangeDirEventEmptyInventoryResult(pMessage, pData)
	logger:debug("whenDetectEventEmptyInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		if (rSelf.segs.u == true) then
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=64, blockname="Cobblestone"}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
		else
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=0}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
		end
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to empty inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:whenChangeDirEventLoadInventoryResult(pMessage, pData)
	logger:debug("whenChangeDirEventLoadInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("move")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to load inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onFillRoof()
	logger:debug("onFillRoof()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("place", { "u", 1 } , rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenFillRoofEventPlaceResult(pMessage, pData)
	logger:debug("whenFillRoofEventPlaceResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("changeDir")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to place roof block", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onFillUp()
	logger:debug("onFillUp()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("place", { "u", 2 } , rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenFillUpEventPlaceResult(pMessage, pData)
	logger:debug("whenFillUpEventPlaceResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("digFill")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to place upper filler block", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onFillDown()
	logger:debug("onFillDown()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("place", { "d", 2 } , rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenFillDownEventPlaceResult(pMessage, pData)
	logger:debug("whenFillDownEventPlaceResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("digFill")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to place lower filler block", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onDigFill()
	logger:debug("onDigFill()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("dig", rSelf.clearDir, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenDigFillEventDigResult(pMessage, pData)
	logger:debug("whenDigFillEventDigResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		local x,y,z = rSelf.xOffset, rSelf.yOffset, rSelf.zOffset
		if (rSelf.clearDir == "u") then
			z = z + 1
		elseif (rSelf.clearDir == "d") then
			z = z - 1
		else
			if (rSelf.dir == 3) then
				y = y + 1
			else
				y = y - 1
			end
		end
		if (type(rSelf.complete[z]) == "nil") then
			rSelf.complete[z] = {}
		end
		if (type(rSelf.complete[z][y]) == "nil") then
			rSelf.complete[z][y] = {}
		end
		rSelf.complete[z][y][x] = true
		rSelf:setState("changeDir")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to dig filler block", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onSuck()
	logger:debug("onSuck()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("suck", rSelf.clearDir, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenSuckEventSuckResult(pMessage, pData)
	logger:debug("whenSuckEventSuckResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		-- Check inventory levels
		local invCount = 0
		for s=1,16 do
			local count = DQTurtle.getItemCount(s)
			if (count > 0) then
				invCount = invCount + 1
			end
		end
		if (invCount >= 15) then
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("emptyInventory", nil, rSelf:getActorRef())
			return true
		end
		rSelf:setState("suck")
	else
		rSelf:setState("dig")
	end
	return true
end

function ClearSegmentJob:whenSuckEventEmptyInventoryResult(pMessage, pData)
	logger:debug("whenSuckEventEmptyInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		if (rSelf.segs.u == true) then
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=64, blockname="Cobblestone"}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
		else
			rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("loadInventory", { {count=0}, {count=1, blockname="Cobblestone"} }, rSelf:getActorRef())
		end
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to empty inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:whenSuckEventLoadInventoryResult(pMessage, pData)
	logger:debug("whenSuckEventLoadInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState("detect")
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to load inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onDig()
	logger:debug("onDig()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf.turtle:tell("dig", rSelf.clearDir, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenDigEventDigResult(pMessage, pData)
	logger:debug("whenDigEventDigResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf.digDetect = true
		rSelf:getActorRef():tell("tick", nil, rSelf:getActorRef(), 0.5)
		local x,y,z = rSelf.xOffset, rSelf.yOffset, rSelf.zOffset
		if (rSelf.clearDir == "u") then
			z = z + 1
		elseif (rSelf.clearDir == "d") then
			z = z - 1
		else
			if (rSelf.dir == 3) then
				y = y + 1
			else
				y = y - 1
			end
		end
		if (type(rSelf.complete[z]) == "nil") then
			rSelf.complete[z] = {}
		end
		if (type(rSelf.complete[z][y]) == "nil") then
			rSelf.complete[z][y] = {}
		end
		rSelf.complete[z][y][x] = true
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to dig", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:whenDigEventTick(pMessage, pData)
	logger:debug("whenDigEventTick(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	rSelf:setState("detect")
	return true
end

function ClearSegmentJob:onMove()
	logger:debug("onMove()")
	local rSelf = ClearSegmentJob:cast(self)
	-- Heading south
	if (rSelf.dir == 3) then
		-- Outside left column
		if (rSelf.xOffset == 0) then
			if (rSelf.yOffset >= 8) then
				rSelf.xOffset = 1
				if (rSelf.segs.b == true) then
					rSelf.yOffset = 9
				else
					rSelf.yOffset = 8
				end
				rSelf.dir = 1
			else
				rSelf.yOffset = rSelf.yOffset + 1
			end
			rSelf.fillUp = false
		-- Outside right column
		elseif (rSelf.xOffset == 9) then
			if (rSelf.yOffset >= 8) then
				rSelf.xOffset = 10
				rSelf.dir = 1
			else
				rSelf.yOffset = rSelf.yOffset + 1
			end
			rSelf.fillUp = false
		-- The main columns
		else
			if ((rSelf.segs.u == true) and (rSelf.zOffset == 10)) then
				rSelf.fillUp = true
			else
				rSelf.fillUp = false
			end
			if (rSelf.segs.b == true) then
				if (rSelf.yOffset >= 9) then
					rSelf.xOffset = rSelf.xOffset + 1
					if ((rSelf.xOffset == 9) and (rSelf.segs.r == true)) then
						rSelf.yOffset = 8
					end
					rSelf.dir = 1
				else
					rSelf.yOffset = rSelf.yOffset + 1
				end
			else
				if (rSelf.yOffset >= 8) then
					rSelf.xOffset = rSelf.xOffset + 1
					if ((rSelf.xOffset == 9) and (rSelf.segs.r == true)) then
						rSelf.yOffset = 8
					end
					rSelf.dir = 1
				else
					rSelf.yOffset = rSelf.yOffset + 1
				end
			end	
		end
	else
		-- Outside right column
		if (rSelf.xOffset == 9) then
			if (rSelf.yOffset <= 1) then
				rSelf.xOffset = 10
				rSelf.dir = 3
			else
				rSelf.yOffset = rSelf.yOffset - 1
			end
			rSelf.fillUp = false
		-- Other columns
		else
			if ((rSelf.segs.u == true) and (rSelf.zOffset == 10)) then
				rSelf.fillUp = true
			else
				rSelf.fillUp = false
			end
			if (rSelf.segs.f == true) then
				if (rSelf.yOffset <= 0) then
					rSelf.xOffset = rSelf.xOffset + 1
					if ((rSelf.xOffset == 9) and (rSelf.segs.r == true)) then
						rSelf.yOffset = 1
					end
					rSelf.dir = 3
				else
					rSelf.yOffset = rSelf.yOffset - 1
				end
			else
				if (rSelf.yOffset <= 1) then
					rSelf.xOffset = rSelf.xOffset + 1
					if ((rSelf.xOffset == 9) and (rSelf.segs.r == true)) then
						rSelf.yOffset = 1
					end
					rSelf.dir = 3
				else
					rSelf.yOffset = rSelf.yOffset - 1
				end
			end	
		end
	end
	if (((rSelf.segs.r == true) and (rSelf.xOffset == 10)) or ((rSelf.segs.r == false) and (rSelf.xOffset == 9))) then		
		-- If the bottom level is finished, then we're done
		if (rSelf.zOffset == 1) then
			rSelf.afterInventory = "finished"
			rSelf:setState("emptyInventory")
			return true
		end
		
		-- Calculate the next level to work
		
		local nextUnknown
		if (rSelf.specials[rSelf.zOffset] == true) then
			nextUnknown = rSelf.zOffset - 1
		else
			nextUnknown = rSelf.zOffset - 2
		end
		if (nextUnknown < 1) then
			nextUnknown = 1
		end

		-- If the next unknown level has specials, then we have to clear this level directly
		if (rSelf.specials[nextUnknown] == true) then
			rSelf.zOffset = nextUnknown
		-- If the next unknown level below that has specials, then we have to clear this level directly, since we may get blocked moving around the specials
		elseif ((nextUnknown > 1) and (rSelf.specials[nextUnknown - 1] == true)) then
			rSelf.zOffset = nextUnknown
		-- If there is more than 1 level remaining, then jump down 2 levels
		elseif (nextUnknown > 1) then
			rSelf.zOffset = nextUnknown - 1
		-- Otherwise, just do the last level
		else
			rSelf.zOffset = nextUnknown
		end
			
		if (rSelf.segs.l == true) then
			rSelf.xOffset = 0
			rSelf.yOffset = 1
		else
			rSelf.xOffset = 1
			if (rSelf.segs.f == true) then
				rSelf.yOffset = 0
			else
				rSelf.yOffset = 1
			end
		end
		rSelf.dir = 3
	end
	-- Check to see if the current spot is blocked (can't check in the outside columns)
	if ((rSelf.xOffset > 0) and (rSelf.xOffset < 9) and (rSelf.yOffset > 0) and (rSelf.yOffset < 9)) then
		local v = DQPos.getRelWorldData(rSelf.clearWorld, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset)
		if (v == DQPos.sNeverBreak) then
			-- It's a never break, so just move on to the next spot (the movement engine should detour around it)
			logger:debug("Found a neverbreak at (%s,%s,%s)", DQDebug.serialize3(rSelf.xOffset, rSelf.yOffset, rSelf.zOffset))
			rSelf:setState("move")
			return true
		end
	end
	-- Calculate whether to dig once the spot is reached
	if ((rSelf.xOffset > 0) and (rSelf.xOffset < 9)) then
		if (rSelf.dir == 3) then
			if ((rSelf.segs.b == true) and (rSelf.yOffset == 9)) then
				rSelf.digFront = false
			elseif ((rSelf.segs.b == false) and (rSelf.yOffset == 8)) then
				rSelf.digFront = false
			else
				rSelf.digFront = true
			end
		else
			if ((rSelf.segs.f == true) and (rSelf.yOffset == 0)) then
				rSelf.digFront = false
			elseif ((rSelf.segs.f == false) and (rSelf.yOffset == 1)) then
				rSelf.digFront = false
			else
				rSelf.digFront = true
			end
		end
		if (rSelf.zOffset == 10) then
			if (rSelf.segs.u == true) then
				if ((rSelf.yOffset == 0) or (rSelf.yOffset == 9)) then
					rSelf.digUp = false
				else
					rSelf.digUp = true
				end
			else
				rSelf.digUp = false
			end
			rSelf.digDown = true
		elseif (rSelf.zOffset == 1) then
			rSelf.digDown = false
			rSelf.digUp = true
		else
			rSelf.digUp = true
			rSelf.digDown = true
		end
		if ((rSelf.digUp == true) and (rSelf.zOffset < 10)) then
			local v = DQPos.getRelWorldData(rSelf.clearWorld, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset + 1)
			if (v == DQPos.sNeverBreak) then
				rSelf.digUp = false
			end
		end
		if ((rSelf.digDown == true) and (rSelf.zOffset > 1)) then
			local v = DQPos.getRelWorldData(rSelf.clearWorld, rSelf.xOffset, rSelf.yOffset, rSelf.zOffset - 1)
			if (v == DQPos.sNeverBreak) then
				rSelf.digDown = false
			end
		end
		if (rSelf.digFront == true) then
			local oy
			if (rSelf.dir == 3) then
				oy = 1
			else
				oy = -1
			end
			local v = DQPos.getRelWorldData(rSelf.clearWorld, rSelf.xOffset, rSelf.yOffset + oy, rSelf.zOffset)
			if (v == DQPos.sNeverBreak) then
				rSelf.digFront = false
			end
		end
	else
		if (rSelf.dir == 3) then
			if ((rSelf.xOffset == 0) or (rSelf.xOffset == 9)) then
				if (rSelf.yOffset == 8) then
					rSelf.digFront = false
				else
					rSelf.digFront = true
				end
			end
		else
			if (rSelf.yOffset == 1) then
				rSelf.digFront = false
			else
				rSelf.digFront = true
			end
		end
		if (rSelf.zOffset == 10) then
			rSelf.digUp = false
			rSelf.digDown = true
		elseif (rSelf.zOffset == 1) then
			rSelf.digUp = true
			rSelf.digDown = false
		else
			rSelf.digUp = true
			rSelf.digDown = true
		end
	end
	local level = rSelf.z1 + rSelf.zOffset - 1
	local x = rSelf.x1 + rSelf.xOffset - 1
	local y = rSelf.y1 + rSelf.yOffset - 1
	logger:debug("Move rel (%s, %s, %s) dir: %s dig u/d/f: %s/%s/%s fu: %s", DQDebug.serialize8(rSelf.xOffset, rSelf.yOffset, rSelf.zOffset, rSelf.dir, rSelf.digUp, rSelf.digDown, rSelf.digFront, rSelf.fillUp))
	-- Send a message to the mover to start the turtle moving in the right direction
	rSelf:getContext():actorFor("/Mover"):tell("move", { x=x, y=y, z=level, dir=rSelf.dir }, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenMoveEventMoveResult(pMessage, pData)
	logger:debug("whenMoveEventMoveResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		if (type(rSelf.complete[rSelf.zOffset]) == "nil") then
			rSelf.complete[rSelf.zOffset] = {}
		end
		if (type(rSelf.complete[rSelf.zOffset][rSelf.yOffset]) == "nil") then
			rSelf.complete[rSelf.zOffset][rSelf.yOffset] = {}
		end
		rSelf.complete[rSelf.zOffset][rSelf.yOffset][rSelf.xOffset] = true
		rSelf:setState("digColumn")
	else
		logger:error("whenMoveEventMoveResult %s", pData)
		rSelf:getContext():getParent():tell("jobResult", "Unable to move", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onEmptyInventory()
	logger:debug("onEmptyInventory()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf:getContext():actorFor("/CommonTurtleEvents"):tell("emptyInventory", nil, rSelf:getActorRef())
	return true
end

function ClearSegmentJob:whenEmptyInventoryEventEmptyInventoryResult(pMessage, pData)
	logger:debug("whenEmptyInventoryEventEmptyInventoryResult(%s, %s)", DQDebug.serialize2(pMessage, pData))
	local rSelf = ClearSegmentJob:cast(self)
	if (pData == true) then
		rSelf:setState(rSelf.afterInventory)
	else
		rSelf:getContext():getParent():tell("jobResult", "Unable to empty inventory", rSelf:getActorRef())
	end
	return true
end

function ClearSegmentJob:onFinished()
	logger:debug("onFinished()")
	local rSelf = ClearSegmentJob:cast(self)
	rSelf:getContext():getParent():tell("jobResult", true, rSelf:getActorRef())
	return true
end

function setup(pTitle, pConfig, pEventHandlers)
	DQWorkerTurtle.addJob("clear", ClearSegmentJob)
end
